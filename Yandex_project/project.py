import sys
from PyQt5.uic import loadUi
from PyQt5.QtWidgets import (QApplication, QMainWindow, QMessageBox, QFileDialog, QInputDialog, QLabel, QPushButton,
                             QColorDialog)
from PyQt5.QtGui import QPixmap
from PIL import Image, ImageDraw
from games import *
from stacked_windows import add_widget, open_window, stacked_windows


class StartWindow(QMainWindow):  # –ö–ª–∞—Å—Å —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–∫–Ω–æ
    def __init__(self):
        super().__init__()
        loadUi('–¥–æ–ø —Ñ–∞–π–ª—ã/start window.ui', self)
        self.menu_btn.clicked.connect(self.open_menu)
        self.instruct_btn.clicked.connect(self.open_instruct)
        self.cod_btn.clicked.connect(self.cod_writing)
        self.painter = Painter()
        self.cat = Cat()
        self.dog = Dog()

    @staticmethod
    def open_menu():  # –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–æ–≤.
        message = QMessageBox()
        message.setText('–ö–æ–≥–¥–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–µ–µ –æ–∫–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –Ω—É–∂–Ω–æ–π —Ç–µ–º–æ–π.')
        message.setInformativeText('–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ä–∞–∑—É, –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å —Å–∞–º–æ–º—É –∏ –≤—ã–±—Ä–∞—Ç—å –µ–≥–æ.')
        message.setWindowTitle('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª!')
        message.exec()
        file_name = QFileDialog.getOpenFileName(stacked_windows, '–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª', '–¥–æ–ø —Ñ–∞–π–ª—ã', 'CSV —Ñ–∞–π–ª (*.csv)')[0]
        menu = MenuWindow(file_name)
        add_widget(menu)
        open_window(8)

    @staticmethod
    def open_instruct():  # –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.
        stacked_windows.resize(470, 500)
        open_window(1)
    
    def cod_writing(self):  # –ú–µ—Ç–æ–¥ –¥–ª—è –≤–≤–æ–¥–∞ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –∫–æ–¥–æ–≤.
        cod, ok_pressed = QInputDialog.getText(self, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥', '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥.')
        if ok_pressed:
            if cod == 'secret':
                self.painter.show()
                message = QMessageBox()
                message.setText('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –Ω–∞—à–ª–∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –æ–∫–Ω–æ!')
                message.setInformativeText('–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Å–µ–±–µ —Ç–æ—Ä—Ç–∏–∫'
                                           ' –∏–ª–∏ –µ—â–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –≤ —á–µ—Å—Ç—å –≤–∞—à–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è. –†–∏—Å—É–Ω–æ–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è '
                                           '–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –ø–∞–ø–∫—É "–¥–æ–ø —Ñ–∞–π–ª—ã", –Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –µ–≥–æ –≤–µ—Ä—Å–∏—è.'
                                           ' –¢–æ–ª—å–∫–æ –Ω–∏–∫–æ–º—É –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç–µ –æ –Ω–∞—à–µ–º –º–∞–ª–µ–Ω—å–∫–æ–º —Å–µ–∫—Ä–µ—Ç–µ!ü§êü§êü§ê')
                message.setWindowTitle('ü§êü§êü§ê')
                message.exec()
            if cod == 'I love cats':
                self.cat.show()
                message = QMessageBox()
                message.setText('–û, –≤—ã —Ç–æ–∂–µ –ª—é–±–∏—Ç–µ –∫–æ—Ç–æ–≤? –ù—É –∫–æ–Ω–µ—á–Ω–æ, –∏–Ω–∞—á–µ –±—ã –≤—ã –Ω–µ –≤–≤–µ–ª–∏ —ç—Ç–æ—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥! '
                                '–ù—É —Ä–∞–∑ —Ç–∞–∫, —Ç–æ –≤–æ—Ç –≤–∞–º –∫–∞—Ä—Ç–∏–Ω–∫–∞ –º–∏–ª–æ–≥–æ –∫–æ—Ç–∏–∫–∞.')
                message.exec()
            if cod == 'I love dogs':
                self.dog.show()
                message = QMessageBox()
                message.setText('–û, –≤—ã —Ç–æ–∂–µ –ª—é–±–∏—Ç–µ —Å–æ–±–∞–∫? –ù—É –∫–æ–Ω–µ—á–Ω–æ, –∏–Ω–∞—á–µ –±—ã –≤—ã –Ω–µ –≤–≤–µ–ª–∏ —ç—Ç–æ—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥! '
                                '–ù—É —Ä–∞–∑ —Ç–∞–∫, —Ç–æ –≤–æ—Ç –≤–∞–º –∫–∞—Ä—Ç–∏–Ω–∫–∞ –º–∏–ª–æ–π —Å–æ–±–∞—á–∫–∏.')
                message.exec()


class InstructWindow(QMainWindow):  # –ö–ª–∞—Å—Å —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –æ–∫–Ω–æ —Å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.
    def __init__(self):
        super().__init__()
        loadUi('–¥–æ–ø —Ñ–∞–π–ª—ã/instruct window.ui', self)
        with open('–¥–æ–ø —Ñ–∞–π–ª—ã/—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ.txt', 'rt', encoding='utf8') as instruct:
            self.instruction.setText(instruct.read())
        self.exit_btn.clicked.connect(self.exit)

    @staticmethod
    def exit():
        stacked_windows.resize(560, 300)
        open_window(0)


class Painter(QMainWindow):  # –ö–ª–∞—Å—Å, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π —Å–µ–∫—Ä–µ—Ç–Ω—É—é —Ä–∏—Å–æ–≤–∞–ª–∫—É.
    def __init__(self):
        super().__init__()
        self.resize(500, 560)
        self.setWindowTitle('–°–µ–∫—Ä–µ—Ç–Ω–æ–µ –æ–∫–Ω–æ')
        self.img_name = '–¥–æ–ø —Ñ–∞–π–ª—ã/–≤–∞—à —Ä–∏—Å—É–Ω–æ–∫.png'
        self.color = 'red'
        self.img = Image.new('RGB', (500, 500), (255, 255, 255))
        self.img.save(self.img_name, 'PNG')
        self.pixmap = QPixmap(self.img_name)
        self.image = QLabel(self)
        self.image.move(0, 0)
        self.image.resize(500, 500)
        self.image.setPixmap(self.pixmap)
        self.color_btn = QPushButton(self)
        self.color_btn.move(0, 500)
        self.color_btn.resize(500, 30)
        self.color_btn.setText('–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç')
        self.eraser = QPushButton(self)
        self.eraser.move(0, 530)
        self.eraser.resize(500, 30)
        self.eraser.setText('–õ–∞—Å—Ç–∏–∫')
        self.need_eraser = False
        self.color_btn.clicked.connect(self.color_change)
        self.eraser.clicked.connect(self.erasering)
        self.point = None

    def color_change(self):  # –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞.
        color = QColorDialog().getColor()
        if color.isValid():
            self.color = color.name()

    def erasering(self):  # –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–∞—Å—Ç–∏–∫–∞.
        if self.eraser.text() == '–õ–∞—Å—Ç–∏–∫':
            self.need_eraser = True
            self.eraser.setText('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∏—Å–æ–≤–∞—Ç—å')
        else:
            self.need_eraser = False
            self.eraser.setText('–õ–∞—Å—Ç–∏–∫')

    def mouseMoveEvent(self, event):
        self.point = (event.x(), event.y())
        self.update()
    
    def paintEvent(self, event):
        super().paintEvent(event)
        if not self.point:
            return
        if not self.need_eraser:
            img = Image.open(self.img_name)
            draw = ImageDraw.Draw(img)
            draw.rectangle((self.point[0] - 1, self.point[1] - 1, self.point[0] + 1, self.point[1] + 1),
                           fill=self.color)
            img.save(self.img_name, 'PNG')
            self.pixmap = QPixmap(self.img_name)
            self.image.setPixmap(self.pixmap)
        else:
            img = Image.open(self.img_name)
            draw = ImageDraw.Draw(img)
            draw.rectangle((self.point[0] - 3, self.point[1] - 3, self.point[0] + 3, self.point[1] + 3), fill='white')
            img.save(self.img_name, 'PNG')
            self.pixmap = QPixmap(self.img_name)
            self.image.setPixmap(self.pixmap)


class Cat(QMainWindow):  # –ö–ª–∞—Å—Å, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π —Å–µ–∫—Ä–µ—Ç —Å –∫–æ—Ç–∏–∫–æ–º.
    def __init__(self):
        super().__init__()
        self.resize(500, 500)
        self.setWindowTitle('Cat')
        self.image = QLabel(self)
        self.image.move(0, 0)
        self.image.resize(500, 500)
        self.pixmap = QPixmap('–¥–æ–ø —Ñ–∞–π–ª—ã/cat.png')
        self.image.setPixmap(self.pixmap)


class Dog(QMainWindow):  # –ö–ª–∞—Å—Å, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π —Å–µ–∫—Ä–µ—Ç —Å —Å–æ–±–∞—á–∫–æ–π
    def __init__(self):
        super().__init__()
        self.resize(500, 500)
        self.setWindowTitle('Dog')
        self.image = QLabel(self)
        self.image.move(0, 0)
        self.image.resize(500, 500)
        self.pixmap = QPixmap('–¥–æ–ø —Ñ–∞–π–ª—ã/dog.png')
        self.image.setPixmap(self.pixmap)


def except_hook(cls, exception, traceback):
    sys.__excepthook__(cls, exception, traceback)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    start = StartWindow()
    add_widget(start)
    instrust = InstructWindow()
    add_widget(instrust)
    open_window(0)
    stacked_windows.show()
    sys.excepthook = except_hook
    sys.exit(app.exec())
